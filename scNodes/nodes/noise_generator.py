from scNodes.core.node import *


def create():
    return NoiseGenNode()


class NoiseGenNode(Node):
    description = "TODO"
    title = "Noise generator"
    group = "Converters"
    colour = (143 / 255, 143 / 255, 143 / 255, 1.0)

    NOISE_TYPES = ["White noise", "Gaussian noise", "Perlin noise"]

    def __init__(self):
        super().__init__()  # Was: super(LoadDataNode, self).__init__()
        self.size = 180

        # Set up connectable attributes
        self.connectable_attributes["dataset_out"] = ConnectableAttribute(ConnectableAttribute.TYPE_DATASET, ConnectableAttribute.OUTPUT, parent = self)

        # Set up node-specific vars
        self.params["type"] = 0
        self.params["width"] = 1024
        self.params["height"] = 1024

    def render(self):
        if super().render_start():
            self.connectable_attributes["dataset_out"].render_start()
            self.connectable_attributes["dataset_out"].render_end()
            imgui.separator()
            imgui.spacing()
            imgui.set_next_item_width(165)
            _, self.params["type"] = imgui.combo("##noisetype", self.params["type"], NoiseGenNode.NOISE_TYPES)
            self.mark_change(_)
            if self.params["type"] == 2:
                pass # TODO: perlin noise settings

            imgui.push_item_width(45)

            imgui.align_text_to_frame_padding()
            imgui.text("width:")
            imgui.same_line(position=60)
            _, self.params["width"] = imgui.input_int("##width", self.params["width"], 0, 0)
            imgui.align_text_to_frame_padding()
            imgui.text("height:")
            imgui.same_line(position=60)
            _, self.params["height"] = imgui.input_int("##height", self.params["height"], 0, 0)
            imgui.pop_item_width()
            super().render_end()

    def get_image_impl(self, idx=None):
        outframe = Frame("Noise texture generated by NoiseGenNode")
        shape = (self.params["width"], self.params["height"])
        if self.params["type"] == 0:
            outframe.data = np.random.uniform(-1.0, 1.0, shape)
        elif self.params["type"] == 1:
            outframe.data = np.random.normal(0.0, 1.0, shape)
        elif self.params["type"] == 2:
            pass
            # TODO: perlin noise output
        return outframe
